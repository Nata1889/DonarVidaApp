@page "/donaciones"

@using BibliotecaDonarVidaApp.Models
@using BibliotecaDonarVidaApp.Services
@using BibliotecaDonarVidaApp.Services.Interfaces
@using DonarVidaApp.Components.Pages
@using Microsoft.AspNetCore.Components

@inject DonacionService DonacionService;
@inject NavigationManager NavigationManager;

@inject DonanteService DonanteService;
@inject ProgramaDonacionService ProgramaDonacionService;

<PageTitle>Donaciones</PageTitle>

<h1>Donaciones</h1>

<a class="btn btn-success btn-sm mb-3" @onclick="NuevaDonacion">Nuevo Donación</a>
@if (donaciones == null)
{
    <p>Cargando datos...</p>
}
else
{
    <div class="row">
        @foreach (var donaciones in donaciones)
        {
            <div class="col-md-4">
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@donanteNombre[donaciones.DonanteId]</h5>
                        <p class="card-text">
                            <strong>Fecha de Donación:</strong> @donaciones.FechaDonacion<br />
                            <strong>Tipo de Donación:</strong> @donaciones.TipoDonacion<br />
                            <strong>Programa de Donación:</strong> @programaDonacionNombre[donaciones.ProgramaDonacionId]
                        </p>
                        <div class="d-flex justify-content-between">
                            <!-- Botón de Editar -->
                            <button class="btn btn-primary" @onclick="() => EditarDonacion(donaciones.Id)">
                                Editar
                            </button>
                            <!-- Botón de Eliminar -->
                            <button class="btn btn-danger" @onclick="() => MostrarModal(donaciones.Id)">
                                Eliminar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

}

@if (isModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <select type="text" id="nombre" class="form-select" @bind="donacionActual.DonanteId">
                            @foreach (var donante in donantes)
                            {
                                <option value="@donante.Id">@donante.Nombre</option>
                            }
                        </select> 
                    </div>
                    <div class="mb-3">
                        <label for="fechaDonacion" class="form-label">Fecha de donación</label>
                        <input type="date" id="fechaDonacion" class="form-control" @bind="donacionActual.FechaDonacion" />
                    </div>
                    <div class="mb-3">
                        <label for="TipoDonacion" class="form-label">Tipo de donación</label>
                        <input type="text" id="TipoDonacion" class="form-control" @bind="donacionActual.TipoDonacion" />
                    </div>
                    <div class="mb-3">
                        <label for="ProgramaDonacion" class="form-label">Programa de donación</label>
                        <select type="text" id="ProgramaDonacion" class="form-select" @bind="donacionActual.ProgramaDonacionId">
                            @foreach (var programa in programaDonacion)
                            {
                                <option value="@programa.Id">@programa.Nombre</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="GuardarDonacion">Guardar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

<!-- Modal de confirmación de eliminación -->
@if (isModalOpen)
{
    <div class="modal" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center;">
        <div class="modal-content" style="background-color: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); width: 300px; text-align: center;">
            <h2>Confirmar Eliminación</h2>
            <p>¿Estás seguro de que deseas eliminar este dato?</p>
            <div>
                <button class="btn btn-secondary" style="margin-right: 10px;" @onclick="CancelarEliminacion">Cancelar</button>
                <button class="btn btn-danger" @onclick="ConfirmarEliminacion">Aceptar</button>
            </div>
        </div>
    </div>
}

@code {
    private List<BibliotecaDonarVidaApp.Models.Donacion>? donaciones;
    private List<BibliotecaDonarVidaApp.Models.Donante>? donantes;
    private List<BibliotecaDonarVidaApp.Models.ProgramaDonacion>? programaDonacion;
    private Dictionary<int, string> donanteNombre = new();
    private Dictionary<int, string> programaDonacionNombre = new();
    private BibliotecaDonarVidaApp.Models.Donacion donacionActual = new BibliotecaDonarVidaApp.Models.Donacion();
    private string modalTitle = string.Empty;
    private bool isModalVisible = false;

    private bool isModalOpen = false;
    private int donacionIdParaEliminar;


    protected override async Task OnInitializedAsync()
    {
        await CargarDonaciones();
        await CargarDonantes();
        donantes = await DonanteService.GetAllAsync();
        await CargarProgramaDonacion();
        programaDonacion = await ProgramaDonacionService.GetAllAsync();
    }

    private async Task CargarProgramaDonacion()
    {
        try
        {
            var programaDonacion = await ProgramaDonacionService.GetAllAsync();
            programaDonacionNombre = programaDonacion.ToDictionary(c => c.Id, c => c.Nombre); // Asigna el nombre de cada cliente a su ID
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching ProgramaDonacion: {ex.Message}");
            donanteNombre = new Dictionary<int, string>();
        }
    }

    private async Task CargarDonantes()
    {
        try
        {
            var donantes = await DonanteService.GetAllAsync();
            donanteNombre = donantes.ToDictionary(c => c.Id, c => c.Nombre); // Asigna el nombre de cada cliente a su ID
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching donantes: {ex.Message}");
            donanteNombre = new Dictionary<int, string>();
        }
    }

    private async Task CargarDonaciones()
    {
        try
        {
            // Llamada al servicio para obtener la lista de donantes.
            var donacionesList = await DonacionService.GetAllAsync();
            if (donacionesList != null)
            {
                donaciones = donacionesList;  // Si el modelo ya coincide, no es necesario mapear.
            }
            else
            {
                donaciones = new List<BibliotecaDonarVidaApp.Models.Donacion>();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al cargar las donaciones: {ex.Message}");
        }
    }

    private void NuevaDonacion()
    {
        donacionActual = new BibliotecaDonarVidaApp.Models.Donacion
        {
                FechaDonacion = DateOnly.FromDateTime(DateTime.Now)
        };
        modalTitle = "Nueva donación";
        isModalVisible = true;
    }

    private async Task EditarDonacion(int id)
    {
        donacionActual = await DonacionService.GetByIdAsync(id);
        modalTitle = "Editar donación";
        isModalVisible = true;
    }

    private async Task GuardarDonacion()
    {
        if (donacionActual.Id == 0)
        {
            // Crear nuevo donante
            await DonacionService.CreateAsync(donacionActual);
        }
        else
        {
            // Actualizar donante existente
            await DonacionService.UpdateAsync(donacionActual);
        }

        await CargarDonaciones();
        CerrarModal();
    }

    private void CerrarModal()
    {
        isModalVisible = false;
    }


    // Método para abrir el modal de confirmación
    private void MostrarModal(int id)
    {
        donacionIdParaEliminar = id;
        isModalOpen = true;
    }

    // Método para cancelar la eliminación
    private void CancelarEliminacion()
    {
        isModalOpen = false;
    }

    // Método para confirmar la eliminación
    private async Task ConfirmarEliminacion()
    {
        var result = await DonacionService.DeleteAsync(donacionIdParaEliminar);

        if (result)
        {
            await CargarDonaciones(); // Recargar la lista de donaciones
                                      // Aquí podrías mostrar una notificación de éxito
        }
        else
        {
            // Aquí podrías mostrar una notificación de error
        }

        isModalOpen = false;
    }

}
