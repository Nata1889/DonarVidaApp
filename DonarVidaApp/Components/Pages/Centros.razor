@page "/centros"

@using BibliotecaDonarVidaApp.Models
@using BibliotecaDonarVidaApp.Services
@using BibliotecaDonarVidaApp.Services.Interfaces
@using DonarVidaApp.Components.Pages
@using Microsoft.AspNetCore.Components

@inject CentroDonacionService CentroDonacionService;
@inject NavigationManager NavigationManager;

<PageTitle>CentrosDonación</PageTitle>

<h1>Centros de donación</h1>

<a class="btn btn-success btn-sm mb-3" @onclick="NuevoCentro">Nuevo Centro</a>

@if (centros == null)
{
    <p>Cargando datos...</p>
}
else
{
    <div class="row">
        @foreach (var centro in centros)
        {
            <div class="col-md-4">
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@centro.Nombre</h5>
                        <p class="card-text">
                            <strong>Dirección:</strong> @centro.Direccion<br />
                            <strong>Capacidad:</strong> @centro.Capacidad
                        </p>
                        <div class="d-flex justify-content-between">
                            <!-- Botón de Editar -->
                            <button class="btn btn-primary" @onclick="() => EditarCentro(centro.Id)">
                                Editar
                            </button>
                            <!-- Botón de Eliminar (comentado, pero se puede agregar) -->
                            <button class="btn btn-danger" @onclick="() => MostrarModal(centro.Id)">eliminar</button> 
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

}

@if (isModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <input type="text" id="nombre" class="form-control" @bind="centroActual.Nombre" />
                    </div>
                    <div class="mb-3">
                        <label for="direccion" class="form-label">Dirección</label>
                        <input type="text" id="direccion" class="form-control" @bind="centroActual.Direccion" />
                    </div>
                    <div class="mb-3">
                        <label for="capacidad" class="form-label">Capacidad</label>
                        <input type="number" id="capacidad" class="form-control" @bind="centroActual.Capacidad" />
                    </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="GuardarCentro">Guardar</button>
                </div>
            </div>
        </div>
    </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@if (isModalOpen)
{
    <div class="modal" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center;">
        <div class="modal-content" style="background-color: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); width: 300px; text-align: center;">
            <h2>Confirmar Eliminación</h2>
            <p>¿Estás seguro de que deseas eliminar este dato?</p>
            <div>
                <button class="btn btn-secondary" style="margin-right: 10px;" @onclick="CancelarEliminacion">Cancelar</button>
                <button class="btn btn-danger" @onclick="ConfirmarEliminacion">Aceptar</button>
            </div>
        </div>
    </div>
}

@code {
    private List<BibliotecaDonarVidaApp.Models.CentroDonacion>? centros;
    private BibliotecaDonarVidaApp.Models.CentroDonacion centroActual = new BibliotecaDonarVidaApp.Models.CentroDonacion();
    private string modalTitle = string.Empty;
    private bool isModalVisible = false;
    private bool isModalOpen = false;
    private int donacionIdParaEliminar;


    // Carga inicial de los centros al inicializar el componente.
    protected override async Task OnInitializedAsync()
    {
        await CargarCentros();
    }

    private async Task CargarCentros()
    {
        try
        {
            // Llamada al servicio para obtener la lista de centros.
            var centrosList = await CentroDonacionService.GetAllAsync();
            if (centrosList != null)
            {
                centros = centrosList;  // Si el modelo ya coincide, no es necesario mapear.
            }
            else
            {
                centros = new List<BibliotecaDonarVidaApp.Models.CentroDonacion>();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al cargar los centros de donacion: {ex.Message}");
        }
    }

    private void NuevoCentro()
    {
        centroActual = new BibliotecaDonarVidaApp.Models.CentroDonacion();
        modalTitle = "Nuevo Centro de Donación";
        isModalVisible = true;
    }

        private async Task EditarCentro(int id)
        {
            centroActual = await CentroDonacionService.GetByIdAsync(id);
            modalTitle = "Editar Centro";
            isModalVisible = true;
        }

        private async Task GuardarCentro()
        {
            if (centroActual.Id == 0)
            {
                // Crear nuevo centro
                await CentroDonacionService.CreateAsync(centroActual);
            }
            else
            {
                // Actualizar centro existente
                await CentroDonacionService.UpdateAsync(centroActual);
            }

            await CargarCentros();
            CerrarModal();
        }

        private void CerrarModal()
        {
            isModalVisible = false;
        }

    // Método para abrir el modal de confirmación
    private void MostrarModal(int id)
    {
        donacionIdParaEliminar = id;
        isModalOpen = true;
    }

    // Método para cancelar la eliminación
    private void CancelarEliminacion()
    {
        isModalOpen = false;
    }

    // Método para confirmar la eliminación
    private async Task ConfirmarEliminacion()
    {
        var result = await CentroDonacionService.DeleteAsync(donacionIdParaEliminar);

        if (result)
        {
            await CargarCentros(); // Recargar la lista de donaciones
                                    // Aquí podrías mostrar una notificación de éxito
        }
        else
        {
            // Aquí podrías mostrar una notificación de error
        }

        isModalOpen = false;
    }

}
